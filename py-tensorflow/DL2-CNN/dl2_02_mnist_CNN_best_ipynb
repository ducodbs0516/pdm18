{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "dl2-02-mnist-CNN-best.ipynb_up",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "interpreter": {
      "hash": "3834ce636a3ba6c6c2bd8b9b527c48eede78c367f849f6cce666ea7f1d26e2fb"
    },
    "kernelspec": {
      "display_name": "Python 3.8.5 64-bit ('base': conda)",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ducodbs0516/pdm18/blob/main/py-tensorflow/DL2-CNN/dl2_02_mnist_CNN_best_ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rswfCVLZ-QW0"
      },
      "source": [
        "# **CNN model of mnist dataset**\n",
        "- Conv2D + FCN\n",
        "    * Conv2D : 2차원 합성곱 필터링 + 풀링(Pooling)\n",
        "    - > 2차원 필터로 영상을 대표하는 특징을 추출\n",
        "    * FCN : 1차원 완전연결신경망\n",
        "    - > Conv2D에서 추출된 대표 특징들을 이용하여 FCN으로 최종 학습 완료\n",
        "\n",
        "***\n",
        "- ## Traget: **Find the best model**\n",
        "***\n",
        "\n",
        "![mnist_NN_2_layers](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdJp5Z6%2FbtqAPebnF3x%2FQCe5vVcskhmxe964bGz4iK%2Fimg.png)\n",
        "\n",
        "(source: https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdJp5Z6%2FbtqAPebnF3x%2FQCe5vVcskhmxe964bGz4iK%2Fimg.png)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1yhvkxS_HhpK"
      },
      "source": [
        "## Search the best model of C2F2\n",
        "- callback\n",
        "    - Early stopping\n",
        "    - model checkpoint"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8GgGzPXPVyfa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cdd424cd-f6c3-407d-daec-7d53091c5de9"
      },
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "# %matplotlib inline\n",
        "\n",
        "print(tf.__version__)\n",
        "\n",
        "tf.random.set_seed(0)"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.7.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nMZqMpIvIlwf"
      },
      "source": [
        "# import TF2 submodules\n",
        "from tensorflow.keras import layers, models, callbacks"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-0IOOUM14Jk1"
      },
      "source": [
        "## **데이터 로딩, 정규화**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N1ogJ7I64Fz-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "29c527e4-9de1-4c37-e580-260d7f6be31f"
      },
      "source": [
        "from keras.datasets import mnist\n",
        "\n",
        "(X_train0, y_train0), (X_test0, y_test0) = mnist.load_data()\n",
        "\n",
        "# Reshape\n",
        "X_train = X_train0.reshape(60000,28,28,1)\n",
        "X_test = X_test0.reshape(10000,28,28,1)\n",
        "\n",
        "# Normalization\n",
        "X_train, X_test = X_train/255.0, X_test/255.0 # 정규화\n",
        "\n",
        "print(\"X_train={0}\".format(X_train.shape))\n",
        "print(\"y_train={0}\".format(y_train0.shape)) \n",
        "print(\"X_test={0}\".format(X_test.shape))\n",
        "print(\"y_test={0}\".format(y_test0.shape))"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11493376/11490434 [==============================] - 0s 0us/step\n",
            "11501568/11490434 [==============================] - 0s 0us/step\n",
            "X_train=(60000, 28, 28, 1)\n",
            "y_train=(60000,)\n",
            "X_test=(10000, 28, 28, 1)\n",
            "y_test=(10000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F46-QZqJHiQ6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9f89b3ef-1f4c-4b3d-c989-da281968f59e"
      },
      "source": [
        "# One-Hot-Encoding\n",
        "# Use function to_categorical() to do One-Hot-Encoding\n",
        "# tf.keras.utils.to_categorical\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "\n",
        "y_train = to_categorical(y_train0, 10)\n",
        "y_test = to_categorical(y_test0, 10)\n",
        "y_train.shape,y_test.shape"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((60000, 10), (10000, 10))"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eZ3OfP5PkEkL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "456f5638-d187-4ab0-8e13-3491c095a9e3"
      },
      "source": [
        "# y_train0.shape vs. y_train.shape\n",
        "y_train0.shape, y_train.shape"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((60000,), (60000, 10))"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5z7SozStigmF"
      },
      "source": [
        "### Display numbers\n",
        "- one random number\n",
        "- 10 representative numbers"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IK7XT3XoirSL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "e50b310f-76e6-40ec-bf5a-e90b47612fd6"
      },
      "source": [
        "# Code here!\n",
        "# display one random image from the training set:\n",
        "class_names = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n",
        "\n",
        "idx = np.random.randint(0, X_train0.shape[0])\n",
        "print(idx)\n",
        "image = X_train0[idx]\n",
        "plt.imshow(image) #, cmap=plt.get_cmap('gray'))\n",
        "plt.title(class_names[y_train0[idx]])\n",
        "plt.xticks([])\n",
        "plt.yticks([])\n",
        "plt.show()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14909\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LzhD5pcukau7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        },
        "outputId": "25e6044a-c319-440b-fc73-de1350e1dfb2"
      },
      "source": [
        "fig = plt.figure(figsize=(10,6))\n",
        "for i in range(10):\n",
        "    plt.subplot(2, 5, i+1)\n",
        "    num0_9 = X_train0[y_train0 == i]\n",
        "    # print(num0_9.shape)\n",
        "    plt.imshow(num0_9[0]) #, cmap='gray') #, interpolation='none')\n",
        "    plt.title(\"Class %d\" % (i))\n",
        "    plt.xticks([])\n",
        "    plt.yticks([])"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x432 with 10 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "55DYVfFXi0WR"
      },
      "source": [
        "# Design CNN"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iPcLIcUCcsiG"
      },
      "source": [
        "### import models, layers, callbacks\n",
        "- models: Sequential\n",
        "- layers: Conv2D, MaxPool2D, Flatten\n",
        "- callbacks: ModelCheckpoint, EarlyStopping"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NzqMC4Xtc3ZE"
      },
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Conv2D, MaxPool2D, Flatten\n",
        "from keras.callbacks import ModelCheckpoint, EarlyStopping"
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Z6DJJUCei-s"
      },
      "source": [
        "## **CNN2 + FCN2**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ancr1_dYrvQq"
      },
      "source": [
        "# Random number seed\n",
        "np.random.seed(1234)\n",
        "tf.random.set_seed(1234)"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pV3NFglM7P65"
      },
      "source": [
        "c2f2 = keras.models.Sequential([ \n",
        "    Conv2D(input_shape=(28,28,1),kernel_size=(3,3),strides=(1,1),filters= 64,padding='same',activation='relu'),\n",
        "    MaxPool2D(pool_size=(2,2), strides=(2,2)), \n",
        "    Conv2D(kernel_size=(3,3),strides=(1,1),filters= 32,padding='same',activation='relu'),\n",
        "    MaxPool2D(pool_size=(2,2), strides=(2,2)),\n",
        "    Flatten(), \n",
        "    keras.layers.Dense(128, activation='relu'),  \n",
        "    keras.layers.Dropout(0.25), \n",
        "    keras.layers.Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "c2f2.compile(optimizer='adam',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy']) "
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OGtCiKy57YkR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "adeedd80-6c1a-45c8-a029-428e0b3832e1"
      },
      "source": [
        "c2f2.summary()"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d (Conv2D)             (None, 28, 28, 64)        640       \n",
            "                                                                 \n",
            " max_pooling2d (MaxPooling2D  (None, 14, 14, 64)       0         \n",
            " )                                                               \n",
            "                                                                 \n",
            " conv2d_1 (Conv2D)           (None, 14, 14, 32)        18464     \n",
            "                                                                 \n",
            " max_pooling2d_1 (MaxPooling  (None, 7, 7, 32)         0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 1568)              0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 128)               200832    \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 128)               0         \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 10)                1290      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 221,226\n",
            "Trainable params: 221,226\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zw_pQPBdJmU8"
      },
      "source": [
        "mc_callback = callbacks.ModelCheckpoint(filepath=\"./mnist_c2f2_best_weights.{epoch:03d}-{val_accuracy:.4f}.hdf5\", \n",
        "                              monitor='val_accuracy', verbose=0, save_best_only=True)\n",
        "es_callback = callbacks.EarlyStopping(monitor='val_accuracy', \n",
        "                            mode='max', verbose=1, patience=10)    # patience=10, 20, 50\n",
        "                            # patience=10: 정확도 최대 값이 나온 뒤 10번의 값이 최대 정확도를 넘지 못하면 중단"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "94GWWQt-7eRS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "214c180c-cca4-458c-ff16-deb10b8d33c8"
      },
      "source": [
        "# Train CNN model\n",
        "# Find and save the best model.\n",
        "hist = c2f2.fit(X_train, y_train, epochs = 500 , batch_size =100, \n",
        "         callbacks=[mc_callback, es_callback], \n",
        "         validation_data=(X_test,y_test))"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/500\n",
            "600/600 [==============================] - 15s 10ms/step - loss: 0.2204 - accuracy: 0.9330 - val_loss: 0.0513 - val_accuracy: 0.9844\n",
            "Epoch 2/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0658 - accuracy: 0.9799 - val_loss: 0.0339 - val_accuracy: 0.9885\n",
            "Epoch 3/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0463 - accuracy: 0.9858 - val_loss: 0.0314 - val_accuracy: 0.9898\n",
            "Epoch 4/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0366 - accuracy: 0.9887 - val_loss: 0.0303 - val_accuracy: 0.9895\n",
            "Epoch 5/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0300 - accuracy: 0.9903 - val_loss: 0.0274 - val_accuracy: 0.9910\n",
            "Epoch 6/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0264 - accuracy: 0.9918 - val_loss: 0.0250 - val_accuracy: 0.9912\n",
            "Epoch 7/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0222 - accuracy: 0.9927 - val_loss: 0.0248 - val_accuracy: 0.9913\n",
            "Epoch 8/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0185 - accuracy: 0.9939 - val_loss: 0.0239 - val_accuracy: 0.9925\n",
            "Epoch 9/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0167 - accuracy: 0.9947 - val_loss: 0.0227 - val_accuracy: 0.9930\n",
            "Epoch 10/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0137 - accuracy: 0.9952 - val_loss: 0.0229 - val_accuracy: 0.9924\n",
            "Epoch 11/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0139 - accuracy: 0.9953 - val_loss: 0.0232 - val_accuracy: 0.9924\n",
            "Epoch 12/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0112 - accuracy: 0.9962 - val_loss: 0.0288 - val_accuracy: 0.9924\n",
            "Epoch 13/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0111 - accuracy: 0.9965 - val_loss: 0.0280 - val_accuracy: 0.9919\n",
            "Epoch 14/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0100 - accuracy: 0.9965 - val_loss: 0.0247 - val_accuracy: 0.9932\n",
            "Epoch 15/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0085 - accuracy: 0.9970 - val_loss: 0.0274 - val_accuracy: 0.9929\n",
            "Epoch 16/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0100 - accuracy: 0.9966 - val_loss: 0.0299 - val_accuracy: 0.9923\n",
            "Epoch 17/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0093 - accuracy: 0.9969 - val_loss: 0.0288 - val_accuracy: 0.9929\n",
            "Epoch 18/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0068 - accuracy: 0.9977 - val_loss: 0.0341 - val_accuracy: 0.9914\n",
            "Epoch 19/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0068 - accuracy: 0.9975 - val_loss: 0.0291 - val_accuracy: 0.9931\n",
            "Epoch 20/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0075 - accuracy: 0.9974 - val_loss: 0.0322 - val_accuracy: 0.9918\n",
            "Epoch 21/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0070 - accuracy: 0.9975 - val_loss: 0.0341 - val_accuracy: 0.9919\n",
            "Epoch 22/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0054 - accuracy: 0.9983 - val_loss: 0.0360 - val_accuracy: 0.9916\n",
            "Epoch 23/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0050 - accuracy: 0.9982 - val_loss: 0.0386 - val_accuracy: 0.9915\n",
            "Epoch 24/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0057 - accuracy: 0.9981 - val_loss: 0.0301 - val_accuracy: 0.9931\n",
            "Epoch 00024: early stopping\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0-7is2U49A6Z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c5134c35-0bdd-4a8d-f615-0dfcbedc241b"
      },
      "source": [
        "c2f2.evaluate(X_test, y_test, batch_size =100)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 [==============================] - 1s 6ms/step - loss: 0.0301 - accuracy: 0.9931\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.03009936213493347, 0.9930999875068665]"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3Ub3qGnjs4EI"
      },
      "source": [
        "## Graph of loss and accuracy\n",
        "- model: C2F2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WNmXXLhvWUiK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "outputId": "ff517f4c-9abc-48dc-a817-cdf3a05c2e28"
      },
      "source": [
        "# Plot loass and accuracy\n",
        "# Plot training & validation accuracy values\n",
        "loss_list = [100 * i for i in hist.history['loss']]\n",
        "acc_list = [100 * i for i in hist.history['accuracy']]\n",
        "\n",
        "epochs = range(1, len(loss_list) + 1)\n",
        "\n",
        "plt.plot(epochs,loss_list) \n",
        "plt.plot(epochs,acc_list) \n",
        "plt.title('Model loss & accuracy')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['loss', 'accuracy'], loc='center left')\n",
        "plt.show()"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0wNssVPhu_8m"
      },
      "source": [
        "vloss_list = [100 * i for i in hist.history['val_loss']]\n",
        "vacc_list = [100 * i for i in hist.history['val_accuracy']]"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TX5Uzro4vjaY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "outputId": "edbc1045-3a04-43bb-aa57-50d44b48ad10"
      },
      "source": [
        "plt.plot(epochs,vloss_list)  \n",
        "plt.plot(epochs,vacc_list)  \n",
        "plt.title('Model val_loss & val_accuracy')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['val_loss', 'val_accuracy'], loc='center left')\n",
        "plt.show()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WkK7XXY2x8J4"
      },
      "source": [
        "np.argmax(np.array(vacc_list))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "S8LAN1AYzykJ"
      },
      "source": [
        "vacc_list[np.argmax(np.array(vacc_list))]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "blALTNdyvjVK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "outputId": "9e935388-48bb-4a44-e473-9c0a60951085"
      },
      "source": [
        "plt.plot(epochs,acc_list)  \n",
        "plt.plot(epochs,vacc_list)  \n",
        "plt.title('accuracy vs. val_accuracy')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['accuracy','val_accuracy'], loc='center')\n",
        "plt.plot(np.argmax(np.array(vacc_list))+1,vacc_list[np.argmax(np.array(vacc_list))], 'r*') \n",
        "plt.show()"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x9EQ2Z_c2gYL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "outputId": "6a0513cb-1096-42a3-9a04-feb2f0234953"
      },
      "source": [
        "# 중요\n",
        "# More graphs of loss and accuracy\n",
        "history_dict = hist.history\n",
        "loss = history_dict['loss']\n",
        "val_loss = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss) + 1)\n",
        "\n",
        "plt.figure(figsize=(14, 4))\n",
        "\n",
        "plt.subplot(1,2,1)\n",
        "plt.plot(epochs, loss, 'go-', label='Training Loss')\n",
        "plt.plot(epochs, val_loss, 'bd', label='Validation Loss')\n",
        "plt.plot(np.argmin(np.array(val_loss))+1,val_loss[np.argmin(np.array(val_loss))], 'r*', ms=12)\n",
        "plt.title('Training and Validation Loss, min: ' + str(np.round(val_loss[np.argmin(np.array(val_loss))],4)))\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "\n",
        "acc = history_dict['accuracy']\n",
        "val_acc = history_dict['val_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss) + 1)\n",
        "\n",
        "plt.subplot(1,2,2)\n",
        "plt.plot(epochs, acc, 'go-', label='Training Accuracy') #, c='blue')\n",
        "plt.plot(epochs, val_acc, 'bd', label='Validation Accuracy') #, c='red')\n",
        "plt.plot(np.argmax(np.array(val_acc))+1,val_acc[np.argmax(np.array(val_acc))], 'r*', ms=12)\n",
        "plt.title('Training and Validation Accuracy, max: ' + str(np.round(val_acc[np.argmax(np.array(val_acc))],4)))\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1008x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gBPKMI4y3fsa"
      },
      "source": [
        "## 최적화된 모형 불러와서 이용\n",
        "\n",
        "- callbacks.ModelCheckpoint를 이용해서 트레이닝 중 val_accuacy가 가장 높은 모형을 가중치와 함께 hdf5 형식으로 저장\n",
        "- load 명령으로 불러 사용"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kWxWNigsrvQv"
      },
      "source": [
        "### Best model\n",
        "- mnist_c2f2_best_weights.014-0.9932.hdf5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b7-ysIVy3fse",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "40eaa157-b990-4b20-c103-19138da1b487"
      },
      "source": [
        "from keras.models import load_model\n",
        "\n",
        "model = load_model('mnist_c2f2_best_weights.014-0.9932.hdf5')\n",
        "model.evaluate(X_test, y_test, batch_size=100)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 [==============================] - 1s 6ms/step - loss: 0.0247 - accuracy: 0.9932\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.024655485525727272, 0.9932000041007996]"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3dO5bh1ILJP_"
      },
      "source": [
        "## [DIY] C2F3의 best model을 구하시오."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SUJxRQtafihM"
      },
      "source": [
        "## **CNN2 + FCN3**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KUR_z2qxrvQv"
      },
      "source": [
        "# Random number seed\n",
        "np.random.seed(1234)\n",
        "tf.random.set_seed(1234)"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Nl5CyAymAB34"
      },
      "source": [
        "c2f3 = keras.models.Sequential([ \n",
        "    Conv2D(input_shape=(28,28,1),filters= 32, \n",
        "                kernel_size=(3,3),strides=(1,1),padding='same',activation='relu'),\n",
        "    MaxPool2D(pool_size=(2,2), strides=(2,2)), \n",
        "    Conv2D(filters= 64, \n",
        "                kernel_size=(3,3),strides=(1,1),padding='same',activation='relu'),\n",
        "    MaxPool2D(pool_size=(2,2), strides=(2,2)),\n",
        "    Flatten(), \n",
        "    keras.layers.Dense(128, activation='relu'),  \n",
        "    keras.layers.Dropout(0.25), \n",
        "    keras.layers.Dense(64, activation='relu'),  \n",
        "    keras.layers.Dropout(0.25), \n",
        "    keras.layers.Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "c2f3.compile(optimizer='adam',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy']) "
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gYxuGW_2ANL8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5cca7885-88b6-4334-cecc-509f64b6e12d"
      },
      "source": [
        "c2f3.summary()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_1\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d_2 (Conv2D)           (None, 28, 28, 32)        320       \n",
            "                                                                 \n",
            " max_pooling2d_2 (MaxPooling  (None, 14, 14, 32)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " conv2d_3 (Conv2D)           (None, 14, 14, 64)        18496     \n",
            "                                                                 \n",
            " max_pooling2d_3 (MaxPooling  (None, 7, 7, 64)         0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten_1 (Flatten)         (None, 3136)              0         \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 128)               401536    \n",
            "                                                                 \n",
            " dropout_1 (Dropout)         (None, 128)               0         \n",
            "                                                                 \n",
            " dense_3 (Dense)             (None, 64)                8256      \n",
            "                                                                 \n",
            " dropout_2 (Dropout)         (None, 64)                0         \n",
            "                                                                 \n",
            " dense_4 (Dense)             (None, 10)                650       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 429,258\n",
            "Trainable params: 429,258\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oZUAs6-8IiZM"
      },
      "source": [
        "mc_callback = callbacks.ModelCheckpoint(filepath=\"./mnist_c2f3_best_weights.{epoch:03d}-{val_accuracy:.4f}.hdf5\", \n",
        "                              monitor='val_accuracy', verbose=0, save_best_only=True)\n",
        "es_callback = callbacks.EarlyStopping(monitor='val_accuracy', \n",
        "                            mode='max', verbose=1, patience=10) "
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5XE7D7tJIy-d",
        "outputId": "d01b1de3-bde1-4bc2-b755-a28316563398"
      },
      "source": [
        "# Train CNN model\n",
        "# Find and save the best model.\n",
        "hist = c2f3.fit(X_train, y_train, epochs = 500 , batch_size =100, \n",
        "         callbacks=[mc_callback, es_callback], \n",
        "         validation_data=(X_test,y_test))"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/500\n",
            "600/600 [==============================] - 7s 11ms/step - loss: 0.2850 - accuracy: 0.9113 - val_loss: 0.0609 - val_accuracy: 0.9805\n",
            "Epoch 2/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0831 - accuracy: 0.9757 - val_loss: 0.0349 - val_accuracy: 0.9886\n",
            "Epoch 3/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0567 - accuracy: 0.9836 - val_loss: 0.0340 - val_accuracy: 0.9892\n",
            "Epoch 4/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0464 - accuracy: 0.9866 - val_loss: 0.0283 - val_accuracy: 0.9910\n",
            "Epoch 5/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0375 - accuracy: 0.9886 - val_loss: 0.0297 - val_accuracy: 0.9910\n",
            "Epoch 6/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0327 - accuracy: 0.9905 - val_loss: 0.0268 - val_accuracy: 0.9915\n",
            "Epoch 7/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0288 - accuracy: 0.9915 - val_loss: 0.0277 - val_accuracy: 0.9918\n",
            "Epoch 8/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0233 - accuracy: 0.9930 - val_loss: 0.0247 - val_accuracy: 0.9926\n",
            "Epoch 9/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0207 - accuracy: 0.9939 - val_loss: 0.0220 - val_accuracy: 0.9939\n",
            "Epoch 10/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0189 - accuracy: 0.9940 - val_loss: 0.0250 - val_accuracy: 0.9921\n",
            "Epoch 11/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0169 - accuracy: 0.9949 - val_loss: 0.0276 - val_accuracy: 0.9928\n",
            "Epoch 12/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0141 - accuracy: 0.9958 - val_loss: 0.0279 - val_accuracy: 0.9916\n",
            "Epoch 13/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0143 - accuracy: 0.9956 - val_loss: 0.0350 - val_accuracy: 0.9904\n",
            "Epoch 14/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0117 - accuracy: 0.9960 - val_loss: 0.0275 - val_accuracy: 0.9930\n",
            "Epoch 15/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0124 - accuracy: 0.9962 - val_loss: 0.0246 - val_accuracy: 0.9933\n",
            "Epoch 16/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0112 - accuracy: 0.9966 - val_loss: 0.0265 - val_accuracy: 0.9927\n",
            "Epoch 17/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0111 - accuracy: 0.9966 - val_loss: 0.0245 - val_accuracy: 0.9935\n",
            "Epoch 18/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0077 - accuracy: 0.9975 - val_loss: 0.0292 - val_accuracy: 0.9926\n",
            "Epoch 19/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0099 - accuracy: 0.9970 - val_loss: 0.0262 - val_accuracy: 0.9941\n",
            "Epoch 20/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0073 - accuracy: 0.9977 - val_loss: 0.0270 - val_accuracy: 0.9930\n",
            "Epoch 21/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0099 - accuracy: 0.9967 - val_loss: 0.0242 - val_accuracy: 0.9936\n",
            "Epoch 22/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0067 - accuracy: 0.9978 - val_loss: 0.0250 - val_accuracy: 0.9933\n",
            "Epoch 23/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0077 - accuracy: 0.9975 - val_loss: 0.0340 - val_accuracy: 0.9918\n",
            "Epoch 24/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0069 - accuracy: 0.9979 - val_loss: 0.0355 - val_accuracy: 0.9920\n",
            "Epoch 25/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0078 - accuracy: 0.9975 - val_loss: 0.0306 - val_accuracy: 0.9928\n",
            "Epoch 26/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0073 - accuracy: 0.9978 - val_loss: 0.0290 - val_accuracy: 0.9933\n",
            "Epoch 27/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0059 - accuracy: 0.9980 - val_loss: 0.0427 - val_accuracy: 0.9908\n",
            "Epoch 28/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0067 - accuracy: 0.9978 - val_loss: 0.0273 - val_accuracy: 0.9937\n",
            "Epoch 29/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0048 - accuracy: 0.9986 - val_loss: 0.0296 - val_accuracy: 0.9938\n",
            "Epoch 00029: early stopping\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FPr6JRs_I2nW",
        "outputId": "c298f06c-9bd8-45d1-8446-40b94e488f1b"
      },
      "source": [
        "c2f3.evaluate(X_test, y_test, batch_size =100)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0296 - accuracy: 0.9938\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.029591098427772522, 0.9937999844551086]"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wDkv7BmEI9I1"
      },
      "source": [
        "## Graph of loss and accuracy\n",
        "- model: C2F3"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "3KOo9g5RI4xW",
        "outputId": "33c8db69-42a4-484a-d480-7dfdc4de85bb"
      },
      "source": [
        "# Plot loass and accuracy\n",
        "# Plot training & validation accuracy values\n",
        "loss_list = [100 * i for i in hist.history['loss']]\n",
        "acc_list = [100 * i for i in hist.history['accuracy']]\n",
        "\n",
        "epochs = range(1, len(loss_list) + 1)\n",
        "\n",
        "plt.plot(epochs,loss_list) \n",
        "plt.plot(epochs,acc_list) \n",
        "plt.title('Model loss & accuracy')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['loss', 'accuracy'], loc='center left')\n",
        "plt.show()"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jTDT2--9I_o1"
      },
      "source": [
        "vloss_list = [100 * i for i in hist.history['val_loss']]\n",
        "vacc_list = [100 * i for i in hist.history['val_accuracy']]"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "-sNoDL-CJADl",
        "outputId": "fad15d67-1004-4df0-d59d-8986f9bd1574"
      },
      "source": [
        "plt.plot(epochs,vloss_list)  \n",
        "plt.plot(epochs,vacc_list)  \n",
        "plt.title('Model val_loss & val_accuracy')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['val_loss', 'val_accuracy'], loc='center left')\n",
        "plt.show()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "X-vXi58vJDK8",
        "outputId": "59d66ab3-67cb-4365-bde9-1438b87ca878"
      },
      "source": [
        "# vacc_list[np.argmax(np.array(vacc_list))]\n",
        "plt.plot(epochs,acc_list)  \n",
        "plt.plot(epochs,vacc_list)  \n",
        "plt.title('accuracy vs. val_accuracy')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['accuracy','val_accuracy'], loc='center')\n",
        "plt.plot(np.argmax(np.array(vacc_list))+1,vacc_list[np.argmax(np.array(vacc_list))], 'r*') \n",
        "plt.show()"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "id": "_ZOe913mJFti",
        "outputId": "5ed30e67-e2dc-4890-bef8-69970d494d53"
      },
      "source": [
        "# More graphs of loss and accuracy\n",
        "history_dict = hist.history\n",
        "loss = history_dict['loss']\n",
        "val_loss = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss) + 1)\n",
        "\n",
        "plt.figure(figsize=(14, 4))\n",
        "\n",
        "plt.subplot(1,2,1)\n",
        "plt.plot(epochs, loss, 'go-', label='Training Loss')\n",
        "plt.plot(epochs, val_loss, 'bd', label='Validation Loss')\n",
        "plt.plot(np.argmin(np.array(val_loss))+1,val_loss[np.argmin(np.array(val_loss))], 'r*', ms=12)\n",
        "plt.title('Training and Validation Loss, min: ' + str(np.round(val_loss[np.argmin(np.array(val_loss))],4)))\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "\n",
        "acc = history_dict['accuracy']\n",
        "val_acc = history_dict['val_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss) + 1)\n",
        "\n",
        "plt.subplot(1,2,2)\n",
        "plt.plot(epochs, acc, 'go-', label='Training Accuracy') #, c='blue')\n",
        "plt.plot(epochs, val_acc, 'bd', label='Validation Accuracy') #, c='red')\n",
        "plt.plot(np.argmax(np.array(val_acc))+1,val_acc[np.argmax(np.array(val_acc))], 'r*', ms=12)\n",
        "plt.title('Training and Validation Accuracy, max: ' + str(np.round(val_acc[np.argmax(np.array(val_acc))],4)))\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1008x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y_wRjaB_JMPP"
      },
      "source": [
        "### Best model\n",
        "- mnist_c2f3_best_weights.019-0.9941.hdf5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IbZGc54uJN_e",
        "outputId": "5e1b3391-fed3-49e3-aefa-95ab5177a088"
      },
      "source": [
        "from keras.models import load_model\n",
        "\n",
        "model = load_model('mnist_c2f3_best_weights.019-0.9941.hdf5')\n",
        "model.evaluate(X_test, y_test, batch_size=100)"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 [==============================] - 1s 5ms/step - loss: 0.0262 - accuracy: 0.9941\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.02619093842804432, 0.9940999746322632]"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GkTGIOFz0TDK"
      },
      "source": [
        "***"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PHiuK2xu0WSE"
      },
      "source": [
        "## [Next] fashion mnist model의 best model을 구하시오.\n",
        "\n",
        "> fashion mnist 데이터 로딩\n",
        "```\n",
        "from keras.datasets import fashion_mnist\n",
        "(X_train0, y_train0), (X_test0, y_test0) = fashion_mnist.load_data()\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xzJpACtKUewx",
        "outputId": "9bbb9d73-5dde-4f64-b59b-aa16b464feb5"
      },
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "# %matplotlib inline\n",
        "\n",
        "tf.random.set_seed(0)\n",
        "\n",
        "print(tf.__version__)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.7.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "alP4k02HUho5"
      },
      "source": [
        "# import TF2 submodules\n",
        "from tensorflow.keras import layers, models, callbacks"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eWeelZrFNli4",
        "outputId": "eabd595c-0857-493f-844b-8714511e68fa"
      },
      "source": [
        "from keras.datasets import fashion_mnist\n",
        "\n",
        "(X_train0, y_train0), (X_test0, y_test0) = fashion_mnist.load_data()\n",
        "\n",
        "# Reshape\n",
        "X_train = X_train0.reshape(60000,28,28,1)\n",
        "X_test = X_test0.reshape(10000,28,28,1)\n",
        "\n",
        "# Normalization\n",
        "X_train, X_test = X_train/255.0, X_test/255.0 # 정규화\n",
        "\n",
        "print(\"X_train={0}\".format(X_train.shape))\n",
        "print(\"y_train={0}\".format(y_train0.shape)) \n",
        "print(\"X_test={0}\".format(X_test.shape))\n",
        "print(\"y_test={0}\".format(y_test0.shape))"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n",
            "32768/29515 [=================================] - 0s 0us/step\n",
            "40960/29515 [=========================================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n",
            "26427392/26421880 [==============================] - 0s 0us/step\n",
            "26435584/26421880 [==============================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n",
            "16384/5148 [===============================================================================================] - 0s 0us/step\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n",
            "4423680/4422102 [==============================] - 0s 0us/step\n",
            "4431872/4422102 [==============================] - 0s 0us/step\n",
            "X_train=(60000, 28, 28, 1)\n",
            "y_train=(60000,)\n",
            "X_test=(10000, 28, 28, 1)\n",
            "y_test=(10000,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u9rYFdsWOKUZ",
        "outputId": "fc16c7f8-a399-4f80-98f5-e6873fb51ddc"
      },
      "source": [
        "# One-Hot-Encoding\n",
        "# Use function to_categorical() to do One-Hot-Encoding\n",
        "# tf.keras.utils.to_categorical\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "\n",
        "y_train = to_categorical(y_train0, 10)\n",
        "y_test = to_categorical(y_test0, 10)\n",
        "y_train.shape,y_test.shape"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((60000, 10), (10000, 10))"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VBLIWLpjOQHP",
        "outputId": "fa95ead2-2998-4799-d597-e186bfd89a97"
      },
      "source": [
        "# y_train0.shape vs. y_train.shape\n",
        "y_train0.shape, y_train.shape"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((60000,), (60000, 10))"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nEmqt5q5ObQB"
      },
      "source": [
        "### Display Fashion-MNIST Dataset"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 286
        },
        "id": "m1lSFMf-OajY",
        "outputId": "b2e9cb2d-89fc-4a39-cd29-6dcdaf48757f"
      },
      "source": [
        "class_names =  ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n",
        "\n",
        "idx = np.random.randint(0, X_train0.shape[0])\n",
        "print(idx)\n",
        "image = X_train0[idx]\n",
        "plt.imshow(image) #, cmap=plt.get_cmap('gray'))\n",
        "plt.title(class_names[y_train0[idx]])\n",
        "plt.xticks([])\n",
        "plt.yticks([])\n",
        "plt.show()"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "27439\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        },
        "id": "2ZoGi3NzUxtJ",
        "outputId": "b0693a25-2722-40d9-d5e2-a464177c3365"
      },
      "source": [
        "fig = plt.figure(figsize=(10,6))\n",
        "for i in range(10):\n",
        "    plt.subplot(2, 5, i+1)\n",
        "    num0_9 = X_train0[y_train0 == i]\n",
        "    # print(num0_9.shape)\n",
        "    plt.imshow(num0_9[0]) #, cmap='gray') #, interpolation='none')\n",
        "    plt.title(class_names[i])\n",
        "    plt.xticks([])\n",
        "    plt.yticks([])\n",
        "plt.show()"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x432 with 10 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d2p3L-PBU5kY"
      },
      "source": [
        "# import models, layers, callbacks"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G5WDiimrPAYh"
      },
      "source": [
        "from keras.models import Sequential\n",
        "from keras.layers import Conv2D, MaxPool2D, Flatten\n",
        "from keras.callbacks import ModelCheckpoint, EarlyStopping"
      ],
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "drklookEgMeS"
      },
      "source": [
        "# **CNN1 + FCN2**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SfNsSRXNgNIW"
      },
      "source": [
        "# Random number seed\n",
        "np.random.seed(1234)\n",
        "tf.random.set_seed(1234)"
      ],
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hMZbGiwUgO3K"
      },
      "source": [
        "fmnist_c1f2 = keras.models.Sequential([ \n",
        "    Conv2D(input_shape=(28,28,1), filters= 32, \n",
        "            kernel_size=(3,3),strides=(1,1),padding='same',activation='relu'),\n",
        "    MaxPool2D(pool_size=(2,2), strides=(2,2)), \n",
        "    Flatten(),\n",
        "    keras.layers.Dense(128, activation='relu'),  \n",
        "    keras.layers.Dropout(0.25), \n",
        "    keras.layers.Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "fmnist_c1f2.compile(optimizer='adam',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy']) "
      ],
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8OVTvRGrgVCa",
        "outputId": "b7afbd5c-a3a2-401f-98b8-728ee00b5886"
      },
      "source": [
        "fmnist_c1f2.summary()"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_4\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d_6 (Conv2D)           (None, 28, 28, 32)        320       \n",
            "                                                                 \n",
            " max_pooling2d_6 (MaxPooling  (None, 14, 14, 32)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten_3 (Flatten)         (None, 6272)              0         \n",
            "                                                                 \n",
            " dense_9 (Dense)             (None, 128)               802944    \n",
            "                                                                 \n",
            " dropout_5 (Dropout)         (None, 128)               0         \n",
            "                                                                 \n",
            " dense_10 (Dense)            (None, 10)                1290      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 804,554\n",
            "Trainable params: 804,554\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "38deGmvEgh6l"
      },
      "source": [
        "mc_callback = callbacks.ModelCheckpoint(filepath=\"./fmnist_c1f2_best_weights.{epoch:03d}-{val_accuracy:.4f}.hdf5\", \n",
        "                              monitor='val_accuracy', verbose=0, save_best_only=True)\n",
        "es_callback = callbacks.EarlyStopping(monitor='val_accuracy', \n",
        "                            mode='max', verbose=1, patience=10) "
      ],
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lnbt_v-lgVbW",
        "outputId": "7335d721-888e-4b55-f106-856f3fc1871f"
      },
      "source": [
        "hist = fmnist_c1f2.fit(X_train, y_train, epochs = 500 , batch_size =100, \n",
        "         callbacks=[mc_callback, es_callback], \n",
        "         validation_data=(X_test,y_test))"
      ],
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.4814 - accuracy: 0.8302 - val_loss: 0.3372 - val_accuracy: 0.8794\n",
            "Epoch 2/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.3147 - accuracy: 0.8881 - val_loss: 0.2934 - val_accuracy: 0.8927\n",
            "Epoch 3/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.2686 - accuracy: 0.9027 - val_loss: 0.2842 - val_accuracy: 0.8994\n",
            "Epoch 4/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.2404 - accuracy: 0.9123 - val_loss: 0.2585 - val_accuracy: 0.9062\n",
            "Epoch 5/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.2196 - accuracy: 0.9193 - val_loss: 0.2608 - val_accuracy: 0.9059\n",
            "Epoch 6/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.2016 - accuracy: 0.9260 - val_loss: 0.2439 - val_accuracy: 0.9104\n",
            "Epoch 7/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.1872 - accuracy: 0.9314 - val_loss: 0.2448 - val_accuracy: 0.9129\n",
            "Epoch 8/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.1744 - accuracy: 0.9366 - val_loss: 0.2458 - val_accuracy: 0.9147\n",
            "Epoch 9/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.1611 - accuracy: 0.9396 - val_loss: 0.2368 - val_accuracy: 0.9189\n",
            "Epoch 10/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.1507 - accuracy: 0.9437 - val_loss: 0.2382 - val_accuracy: 0.9185\n",
            "Epoch 11/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.1379 - accuracy: 0.9489 - val_loss: 0.2444 - val_accuracy: 0.9174\n",
            "Epoch 12/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.1287 - accuracy: 0.9520 - val_loss: 0.2684 - val_accuracy: 0.9153\n",
            "Epoch 13/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.1208 - accuracy: 0.9545 - val_loss: 0.2507 - val_accuracy: 0.9199\n",
            "Epoch 14/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.1132 - accuracy: 0.9575 - val_loss: 0.2607 - val_accuracy: 0.9210\n",
            "Epoch 15/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.1060 - accuracy: 0.9610 - val_loss: 0.2682 - val_accuracy: 0.9199\n",
            "Epoch 16/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.0980 - accuracy: 0.9635 - val_loss: 0.2647 - val_accuracy: 0.9248\n",
            "Epoch 17/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.0921 - accuracy: 0.9657 - val_loss: 0.2779 - val_accuracy: 0.9208\n",
            "Epoch 18/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.0835 - accuracy: 0.9689 - val_loss: 0.2752 - val_accuracy: 0.9225\n",
            "Epoch 19/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.0793 - accuracy: 0.9704 - val_loss: 0.2915 - val_accuracy: 0.9245\n",
            "Epoch 20/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.0748 - accuracy: 0.9715 - val_loss: 0.3040 - val_accuracy: 0.9222\n",
            "Epoch 21/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.0704 - accuracy: 0.9734 - val_loss: 0.3130 - val_accuracy: 0.9217\n",
            "Epoch 22/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.0669 - accuracy: 0.9754 - val_loss: 0.3091 - val_accuracy: 0.9231\n",
            "Epoch 23/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.0656 - accuracy: 0.9755 - val_loss: 0.3100 - val_accuracy: 0.9238\n",
            "Epoch 24/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.0605 - accuracy: 0.9775 - val_loss: 0.3349 - val_accuracy: 0.9215\n",
            "Epoch 25/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.0574 - accuracy: 0.9789 - val_loss: 0.3321 - val_accuracy: 0.9247\n",
            "Epoch 26/500\n",
            "600/600 [==============================] - 4s 7ms/step - loss: 0.0554 - accuracy: 0.9796 - val_loss: 0.3519 - val_accuracy: 0.9205\n",
            "Epoch 00026: early stopping\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2sXCueNChYmF",
        "outputId": "935d9ee1-ac8b-437b-e0e2-2dd827f33dd9"
      },
      "source": [
        "fmnist_c1f2.evaluate(X_test, y_test, batch_size = 100)"
      ],
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 [==============================] - 0s 4ms/step - loss: 0.3570 - accuracy: 0.9213\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.3570038080215454, 0.9212999939918518]"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7X6B00KZhx40"
      },
      "source": [
        "### C1F2 Best Model\n",
        "- fmnist_c1f2_best_weights.016-0.9248.hdf5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PStecQMHhyPz",
        "outputId": "596316a3-6e42-4898-e2a2-2a6a925070ef"
      },
      "source": [
        "from keras.models import load_model\n",
        "\n",
        "model = load_model('fmnist_c1f2_best_weights.016-0.9248.hdf5')\n",
        "model.evaluate(X_test, y_test, batch_size=100)"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 [==============================] - 1s 4ms/step - loss: 0.2647 - accuracy: 0.9248\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.26468244194984436, 0.9247999787330627]"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6chEOfbcllpm"
      },
      "source": [
        "# **CNN1 + FCN3**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gIsc6jIal3Yv"
      },
      "source": [
        "# Random number seed\n",
        "np.random.seed(1234)\n",
        "tf.random.set_seed(1234)"
      ],
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "THGzCalZl5cj"
      },
      "source": [
        "fmnist_c1f3 = tf.keras.models.Sequential([ \n",
        "    # tf.keras.layers.Flatten(input_shape=(28, 28)), \n",
        "    Conv2D(input_shape=(28,28,1), filters= 32,\n",
        "            kernel_size=(3,3),strides=(1,1),padding='same',activation='relu'),\n",
        "    MaxPool2D(pool_size=(2,2), strides=(2,2)), \n",
        "    Flatten(),\n",
        "    tf.keras.layers.Dense(256, activation='relu'),  \n",
        "    tf.keras.layers.Dropout(0.25),\n",
        "    tf.keras.layers.Dense(128, activation='relu'),  \n",
        "    tf.keras.layers.Dropout(0.25), \n",
        "    tf.keras.layers.Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "fmnist_c1f3.compile(optimizer='adam',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy']) "
      ],
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-wu93Hp8l_UT",
        "outputId": "1cfdf2cb-a4ec-4f64-9ef7-a7899cd015d3"
      },
      "source": [
        "fmnist_c1f3.summary()"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_6\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d_8 (Conv2D)           (None, 28, 28, 32)        320       \n",
            "                                                                 \n",
            " max_pooling2d_8 (MaxPooling  (None, 14, 14, 32)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " flatten_5 (Flatten)         (None, 6272)              0         \n",
            "                                                                 \n",
            " dense_14 (Dense)            (None, 256)               1605888   \n",
            "                                                                 \n",
            " dropout_8 (Dropout)         (None, 256)               0         \n",
            "                                                                 \n",
            " dense_15 (Dense)            (None, 128)               32896     \n",
            "                                                                 \n",
            " dropout_9 (Dropout)         (None, 128)               0         \n",
            "                                                                 \n",
            " dense_16 (Dense)            (None, 10)                1290      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 1,640,394\n",
            "Trainable params: 1,640,394\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O4Gl5YHimDek"
      },
      "source": [
        "mc_callback = callbacks.ModelCheckpoint(filepath=\"./fmnist_c1f3_best_weights.{epoch:03d}-{val_accuracy:.4f}.hdf5\", \n",
        "                              monitor='val_accuracy', verbose=0, save_best_only=True)\n",
        "es_callback = callbacks.EarlyStopping(monitor='val_accuracy', \n",
        "                            mode='max', verbose=1, patience=10) "
      ],
      "execution_count": 72,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m0x0y9QHmWo8",
        "outputId": "f085ea7a-892e-4e3c-9470-e17f6d0b8e7f"
      },
      "source": [
        "hist = fmnist_c1f3.fit(X_train, y_train, epochs = 500 , batch_size =100, \n",
        "         callbacks=[mc_callback, es_callback], \n",
        "         validation_data=(X_test,y_test))"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.4924 - accuracy: 0.8271 - val_loss: 0.3379 - val_accuracy: 0.8778\n",
            "Epoch 2/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.3141 - accuracy: 0.8866 - val_loss: 0.2900 - val_accuracy: 0.8911\n",
            "Epoch 3/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.2672 - accuracy: 0.9032 - val_loss: 0.2730 - val_accuracy: 0.9017\n",
            "Epoch 4/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.2371 - accuracy: 0.9125 - val_loss: 0.2569 - val_accuracy: 0.9065\n",
            "Epoch 5/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.2129 - accuracy: 0.9218 - val_loss: 0.2520 - val_accuracy: 0.9102\n",
            "Epoch 6/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.1940 - accuracy: 0.9291 - val_loss: 0.2411 - val_accuracy: 0.9146\n",
            "Epoch 7/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.1771 - accuracy: 0.9334 - val_loss: 0.2422 - val_accuracy: 0.9155\n",
            "Epoch 8/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.1606 - accuracy: 0.9397 - val_loss: 0.2543 - val_accuracy: 0.9141\n",
            "Epoch 9/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.1491 - accuracy: 0.9437 - val_loss: 0.2543 - val_accuracy: 0.9163\n",
            "Epoch 10/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.1364 - accuracy: 0.9495 - val_loss: 0.2648 - val_accuracy: 0.9155\n",
            "Epoch 11/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.1284 - accuracy: 0.9513 - val_loss: 0.2568 - val_accuracy: 0.9170\n",
            "Epoch 12/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.1118 - accuracy: 0.9589 - val_loss: 0.2819 - val_accuracy: 0.9167\n",
            "Epoch 13/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.1079 - accuracy: 0.9594 - val_loss: 0.2580 - val_accuracy: 0.9214\n",
            "Epoch 14/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.0984 - accuracy: 0.9629 - val_loss: 0.2903 - val_accuracy: 0.9203\n",
            "Epoch 15/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.0895 - accuracy: 0.9674 - val_loss: 0.2985 - val_accuracy: 0.9182\n",
            "Epoch 16/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.0856 - accuracy: 0.9682 - val_loss: 0.2909 - val_accuracy: 0.9203\n",
            "Epoch 17/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.0792 - accuracy: 0.9701 - val_loss: 0.3047 - val_accuracy: 0.9206\n",
            "Epoch 18/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.0738 - accuracy: 0.9731 - val_loss: 0.3144 - val_accuracy: 0.9208\n",
            "Epoch 19/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.0699 - accuracy: 0.9742 - val_loss: 0.3227 - val_accuracy: 0.9193\n",
            "Epoch 20/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.0642 - accuracy: 0.9768 - val_loss: 0.3386 - val_accuracy: 0.9202\n",
            "Epoch 21/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.0584 - accuracy: 0.9782 - val_loss: 0.3566 - val_accuracy: 0.9194\n",
            "Epoch 22/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.0575 - accuracy: 0.9787 - val_loss: 0.3550 - val_accuracy: 0.9186\n",
            "Epoch 23/500\n",
            "600/600 [==============================] - 5s 8ms/step - loss: 0.0543 - accuracy: 0.9800 - val_loss: 0.3719 - val_accuracy: 0.9212\n",
            "Epoch 00023: early stopping\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4BTiscyPmbsU",
        "outputId": "8b00d84d-a110-4b88-b69f-c8fcd693d85e"
      },
      "source": [
        "fmnist_c1f2.evaluate(X_test, y_test, batch_size = 100)"
      ],
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 [==============================] - 0s 4ms/step - loss: 0.3519 - accuracy: 0.9205\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.3518894910812378, 0.9204999804496765]"
            ]
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7voCl0vTmcfl"
      },
      "source": [
        "### C1F3 Best Model\n",
        "- fmnist_c1f3_best_weights.013-0.9214.hdf5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Yz64VB2Gmfcc",
        "outputId": "81807e95-c736-4175-ce2b-d8c5e7263550"
      },
      "source": [
        "from keras.models import load_model\n",
        "\n",
        "model = load_model('fmnist_c1f3_best_weights.013-0.9214.hdf5')\n",
        "model.evaluate(X_test, y_test, batch_size=100)"
      ],
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 [==============================] - 1s 5ms/step - loss: 0.2580 - accuracy: 0.9214\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.25797581672668457, 0.9214000105857849]"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3L8aSaqBU7lQ"
      },
      "source": [
        "# **CNN2 + FCN2**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_tWAUx7KVAsK"
      },
      "source": [
        "# Random number seed\n",
        "np.random.seed(1234)\n",
        "tf.random.set_seed(1234)"
      ],
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mUBnsS_qVDUt"
      },
      "source": [
        "fmnist_c2f2 = keras.models.Sequential([ \n",
        "    Conv2D(input_shape=(28,28,1), filters= 64, \n",
        "                kernel_size=(3,3),strides=(1,1),padding='same',activation='relu'),\n",
        "    MaxPool2D(pool_size=(2,2), strides=(2,2)), \n",
        "    Conv2D(filters= 32, \n",
        "                kernel_size=(3,3),strides=(1,1),padding='same',activation='relu'),\n",
        "    MaxPool2D(pool_size=(2,2), strides=(2,2)),\n",
        "    Flatten(), \n",
        "    keras.layers.Dense(128, activation='relu'),  \n",
        "    keras.layers.Dropout(0.25), \n",
        "    keras.layers.Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "fmnist_c2f2.compile(optimizer='adam',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy']) "
      ],
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "avqxl4QkPd41",
        "outputId": "a6a66f30-11ec-4237-c0ba-c816eaa7c5d2"
      },
      "source": [
        "fmnist_c2f2.summary()"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_7\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d_9 (Conv2D)           (None, 28, 28, 64)        640       \n",
            "                                                                 \n",
            " max_pooling2d_9 (MaxPooling  (None, 14, 14, 64)       0         \n",
            " 2D)                                                             \n",
            "                                                                 \n",
            " conv2d_10 (Conv2D)          (None, 14, 14, 32)        18464     \n",
            "                                                                 \n",
            " max_pooling2d_10 (MaxPoolin  (None, 7, 7, 32)         0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " flatten_6 (Flatten)         (None, 1568)              0         \n",
            "                                                                 \n",
            " dense_17 (Dense)            (None, 128)               200832    \n",
            "                                                                 \n",
            " dropout_10 (Dropout)        (None, 128)               0         \n",
            "                                                                 \n",
            " dense_18 (Dense)            (None, 10)                1290      \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 221,226\n",
            "Trainable params: 221,226\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WPiw-fT-Pj84"
      },
      "source": [
        "mc_callback = callbacks.ModelCheckpoint(filepath=\"./fmnist_c2f2_best_weights.{epoch:03d}-{val_accuracy:.4f}.hdf5\", \n",
        "                              monitor='val_accuracy', verbose=0, save_best_only=True)\n",
        "es_callback = callbacks.EarlyStopping(monitor='val_accuracy', \n",
        "                            mode='max', verbose=1, patience=10) "
      ],
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JiON43EJPm7e",
        "outputId": "dafe138c-565b-44af-d8c4-f30b30a50ba3"
      },
      "source": [
        "# Train CNN model\n",
        "# Find and save the best model.\n",
        "hist = fmnist_c2f2.fit(X_train, y_train, epochs = 500 , batch_size =100, \n",
        "         callbacks=[mc_callback, es_callback], \n",
        "         validation_data=(X_test,y_test))"
      ],
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.5301 - accuracy: 0.8091 - val_loss: 0.3599 - val_accuracy: 0.8684\n",
            "Epoch 2/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.3427 - accuracy: 0.8780 - val_loss: 0.3126 - val_accuracy: 0.8851\n",
            "Epoch 3/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.2923 - accuracy: 0.8936 - val_loss: 0.2861 - val_accuracy: 0.8955\n",
            "Epoch 4/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.2642 - accuracy: 0.9033 - val_loss: 0.2696 - val_accuracy: 0.8982\n",
            "Epoch 5/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.2425 - accuracy: 0.9121 - val_loss: 0.2672 - val_accuracy: 0.9011\n",
            "Epoch 6/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.2240 - accuracy: 0.9178 - val_loss: 0.2489 - val_accuracy: 0.9076\n",
            "Epoch 7/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.2074 - accuracy: 0.9235 - val_loss: 0.2489 - val_accuracy: 0.9099\n",
            "Epoch 8/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.1936 - accuracy: 0.9281 - val_loss: 0.2383 - val_accuracy: 0.9151\n",
            "Epoch 9/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.1785 - accuracy: 0.9342 - val_loss: 0.2442 - val_accuracy: 0.9130\n",
            "Epoch 10/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.1667 - accuracy: 0.9374 - val_loss: 0.2310 - val_accuracy: 0.9157\n",
            "Epoch 11/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.1581 - accuracy: 0.9410 - val_loss: 0.2347 - val_accuracy: 0.9179\n",
            "Epoch 12/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.1459 - accuracy: 0.9455 - val_loss: 0.2424 - val_accuracy: 0.9160\n",
            "Epoch 13/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.1384 - accuracy: 0.9485 - val_loss: 0.2299 - val_accuracy: 0.9221\n",
            "Epoch 14/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.1278 - accuracy: 0.9524 - val_loss: 0.2377 - val_accuracy: 0.9222\n",
            "Epoch 15/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.1195 - accuracy: 0.9554 - val_loss: 0.2317 - val_accuracy: 0.9240\n",
            "Epoch 16/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.1118 - accuracy: 0.9577 - val_loss: 0.2547 - val_accuracy: 0.9248\n",
            "Epoch 17/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.1049 - accuracy: 0.9592 - val_loss: 0.2465 - val_accuracy: 0.9189\n",
            "Epoch 18/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.1015 - accuracy: 0.9610 - val_loss: 0.2417 - val_accuracy: 0.9261\n",
            "Epoch 19/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.0939 - accuracy: 0.9643 - val_loss: 0.2580 - val_accuracy: 0.9253\n",
            "Epoch 20/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0859 - accuracy: 0.9672 - val_loss: 0.2550 - val_accuracy: 0.9256\n",
            "Epoch 21/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0821 - accuracy: 0.9689 - val_loss: 0.2686 - val_accuracy: 0.9251\n",
            "Epoch 22/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0803 - accuracy: 0.9700 - val_loss: 0.2763 - val_accuracy: 0.9258\n",
            "Epoch 23/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0751 - accuracy: 0.9712 - val_loss: 0.2749 - val_accuracy: 0.9238\n",
            "Epoch 24/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.0691 - accuracy: 0.9729 - val_loss: 0.2987 - val_accuracy: 0.9224\n",
            "Epoch 25/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0680 - accuracy: 0.9750 - val_loss: 0.2930 - val_accuracy: 0.9243\n",
            "Epoch 26/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0635 - accuracy: 0.9761 - val_loss: 0.3348 - val_accuracy: 0.9199\n",
            "Epoch 27/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0611 - accuracy: 0.9761 - val_loss: 0.3309 - val_accuracy: 0.9192\n",
            "Epoch 28/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0576 - accuracy: 0.9778 - val_loss: 0.3223 - val_accuracy: 0.9220\n",
            "Epoch 00028: early stopping\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zM8flxjlQ8E6",
        "outputId": "5494a694-dde4-4686-b1d5-859758452fc4"
      },
      "source": [
        "fmnist_c2f2.evaluate(X_test, y_test, batch_size =100)"
      ],
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 [==============================] - 1s 5ms/step - loss: 0.3223 - accuracy: 0.9220\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.32232144474983215, 0.921999990940094]"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x16ygjr6F3jf"
      },
      "source": [
        "# Graph of loss and accuracy\n",
        "- model: fmnist_c2f2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "YEJ33jlrJs4g",
        "outputId": "9fb945cf-2c79-46f5-943d-363a36abf5be"
      },
      "source": [
        "# Plot loass and accuracy\n",
        "# Plot training & validation accuracy values\n",
        "loss_list = [100 * i for i in hist.history['loss']]\n",
        "acc_list = [100 * i for i in hist.history['accuracy']]\n",
        "\n",
        "epochs = range(1, len(loss_list) + 1)\n",
        "\n",
        "plt.plot(epochs,loss_list) \n",
        "plt.plot(epochs,acc_list) \n",
        "plt.title('Model loss & accuracy')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['loss', 'accuracy'], loc='center left')\n",
        "plt.show()"
      ],
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CimatqdAJtSl"
      },
      "source": [
        "vloss_list = [100 * i for i in hist.history['val_loss']]\n",
        "vacc_list = [100 * i for i in hist.history['val_accuracy']]"
      ],
      "execution_count": 85,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "lmGrsOhFJu0u",
        "outputId": "72388b5f-c5a6-4163-8eb7-dfb3db82423d"
      },
      "source": [
        "plt.plot(epochs,vloss_list)  \n",
        "plt.plot(epochs,vacc_list)  \n",
        "plt.title('Model val_loss & val_accuracy')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['val_loss', 'val_accuracy'], loc='center left')\n",
        "plt.show()"
      ],
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "Vpylbwq8JwIG",
        "outputId": "e14042cf-f73f-492b-9e08-d2225d0eba1b"
      },
      "source": [
        "plt.plot(epochs,acc_list)  \n",
        "plt.plot(epochs,vacc_list)  \n",
        "plt.title('accuracy vs. val_accuracy')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['accuracy','val_accuracy'], loc='center')\n",
        "plt.plot(np.argmax(np.array(vacc_list))+1,vacc_list[np.argmax(np.array(vacc_list))], 'r*') \n",
        "plt.show()"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "Bq87kHRTRMZR",
        "outputId": "5f373f7b-524c-46da-9ac6-1f3db1a16c97"
      },
      "source": [
        "# 중요\n",
        "# More graphs of loss and accuracy\n",
        "history_dict = hist.history\n",
        "loss = history_dict['loss']\n",
        "val_loss = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss) + 1)\n",
        "\n",
        "plt.figure(figsize=(14, 4))\n",
        "\n",
        "plt.subplot(1,2,1)\n",
        "plt.plot(epochs, loss, 'go-', label='Training Loss')\n",
        "plt.plot(epochs, val_loss, 'bd', label='Validation Loss')\n",
        "plt.plot(np.argmin(np.array(val_loss))+1,val_loss[np.argmin(np.array(val_loss))], 'r*', ms=12)\n",
        "plt.title('Training and Validation Loss, min: ' + str(np.round(val_loss[np.argmin(np.array(val_loss))],4)))\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "\n",
        "acc = history_dict['accuracy']\n",
        "val_acc = history_dict['val_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss) + 1)\n",
        "\n",
        "plt.subplot(1,2,2)\n",
        "plt.plot(epochs, acc, 'go-', label='Training Accuracy') #, c='blue')\n",
        "plt.plot(epochs, val_acc, 'bd', label='Validation Accuracy') #, c='red')\n",
        "plt.plot(np.argmax(np.array(val_acc))+1,val_acc[np.argmax(np.array(val_acc))], 'r*', ms=12)\n",
        "plt.title('Training and Validation Accuracy, max: ' + str(np.round(val_acc[np.argmax(np.array(val_acc))],4)))\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1008x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nFfCp50zRTdU"
      },
      "source": [
        "### C2F2 Best Model\n",
        "- fmnist_c2f2_best_weights.018-0.9261.hdf5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ohI6uzt1Ratn",
        "outputId": "a80c64c3-d7c0-482c-f363-57d955937e7d"
      },
      "source": [
        "from keras.models import load_model\n",
        "\n",
        "model = load_model('fmnist_c2f2_best_weights.018-0.9261.hdf5')\n",
        "model.evaluate(X_test, y_test, batch_size=100)"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 [==============================] - 1s 5ms/step - loss: 0.2417 - accuracy: 0.9261\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.2416606992483139, 0.9261000156402588]"
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GOSUhoOUR3UY"
      },
      "source": [
        "# **CNN2 + FCN3**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HYeHMu1sR-Ux"
      },
      "source": [
        "# Random number seed\n",
        "np.random.seed(1234)\n",
        "tf.random.set_seed(1234)"
      ],
      "execution_count": 90,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iCkUMeZ5R0W4"
      },
      "source": [
        "fmnist_c2f3 = keras.models.Sequential([ \n",
        "    Conv2D(input_shape=(28,28,1),filters= 32, \n",
        "                kernel_size=(3,3),strides=(1,1),padding='same',activation='relu'),\n",
        "    MaxPool2D(pool_size=(2,2), strides=(2,2)), \n",
        "    Conv2D(filters= 64, \n",
        "                kernel_size=(3,3),strides=(1,1),padding='same',activation='relu'),\n",
        "    MaxPool2D(pool_size=(2,2), strides=(2,2)),\n",
        "    Flatten(), \n",
        "    keras.layers.Dense(128, activation='relu'),  \n",
        "    keras.layers.Dropout(0.25), \n",
        "    keras.layers.Dense(64, activation='relu'),  \n",
        "    keras.layers.Dropout(0.25), \n",
        "    keras.layers.Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "fmnist_c2f3.compile(optimizer='adam',\n",
        "              loss='categorical_crossentropy',\n",
        "              metrics=['accuracy']) "
      ],
      "execution_count": 91,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "puzzCYq_SFbw",
        "outputId": "c85841cf-bd9a-480f-be54-43cfa60d3966"
      },
      "source": [
        "fmnist_c2f3.summary()"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_8\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " conv2d_11 (Conv2D)          (None, 28, 28, 32)        320       \n",
            "                                                                 \n",
            " max_pooling2d_11 (MaxPoolin  (None, 14, 14, 32)       0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " conv2d_12 (Conv2D)          (None, 14, 14, 64)        18496     \n",
            "                                                                 \n",
            " max_pooling2d_12 (MaxPoolin  (None, 7, 7, 64)         0         \n",
            " g2D)                                                            \n",
            "                                                                 \n",
            " flatten_7 (Flatten)         (None, 3136)              0         \n",
            "                                                                 \n",
            " dense_19 (Dense)            (None, 128)               401536    \n",
            "                                                                 \n",
            " dropout_11 (Dropout)        (None, 128)               0         \n",
            "                                                                 \n",
            " dense_20 (Dense)            (None, 64)                8256      \n",
            "                                                                 \n",
            " dropout_12 (Dropout)        (None, 64)                0         \n",
            "                                                                 \n",
            " dense_21 (Dense)            (None, 10)                650       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 429,258\n",
            "Trainable params: 429,258\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IXFfjHVdSOMq"
      },
      "source": [
        "mc_callback = callbacks.ModelCheckpoint(filepath=\"./fmnist_c2f3_best_weights.{epoch:03d}-{val_accuracy:.4f}.hdf5\", \n",
        "                              monitor='val_accuracy', verbose=0, save_best_only=True)\n",
        "es_callback = callbacks.EarlyStopping(monitor='val_accuracy', \n",
        "                            mode='max', verbose=1, patience=10) "
      ],
      "execution_count": 93,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gutk5bX6SSzA",
        "outputId": "149990bf-4e42-4f13-e753-ca2d8be99af2"
      },
      "source": [
        "# Train CNN model\n",
        "# Find and save the best model.\n",
        "hist = fmnist_c2f3.fit(X_train, y_train, epochs = 500 , batch_size =100, \n",
        "         callbacks=[mc_callback, es_callback], \n",
        "         validation_data=(X_test,y_test))"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/500\n",
            "600/600 [==============================] - 7s 11ms/step - loss: 0.5894 - accuracy: 0.7859 - val_loss: 0.3774 - val_accuracy: 0.8628\n",
            "Epoch 2/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.3673 - accuracy: 0.8706 - val_loss: 0.3122 - val_accuracy: 0.8845\n",
            "Epoch 3/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.3107 - accuracy: 0.8888 - val_loss: 0.2932 - val_accuracy: 0.8907\n",
            "Epoch 4/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.2774 - accuracy: 0.9006 - val_loss: 0.2688 - val_accuracy: 0.9011\n",
            "Epoch 5/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.2509 - accuracy: 0.9091 - val_loss: 0.2585 - val_accuracy: 0.9072\n",
            "Epoch 6/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.2307 - accuracy: 0.9164 - val_loss: 0.2395 - val_accuracy: 0.9136\n",
            "Epoch 7/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.2127 - accuracy: 0.9229 - val_loss: 0.2354 - val_accuracy: 0.9155\n",
            "Epoch 8/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.2001 - accuracy: 0.9276 - val_loss: 0.2497 - val_accuracy: 0.9087\n",
            "Epoch 9/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.1846 - accuracy: 0.9331 - val_loss: 0.2325 - val_accuracy: 0.9166\n",
            "Epoch 10/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.1690 - accuracy: 0.9386 - val_loss: 0.2245 - val_accuracy: 0.9214\n",
            "Epoch 11/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.1585 - accuracy: 0.9416 - val_loss: 0.2246 - val_accuracy: 0.9221\n",
            "Epoch 12/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.1487 - accuracy: 0.9453 - val_loss: 0.2586 - val_accuracy: 0.9130\n",
            "Epoch 13/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.1399 - accuracy: 0.9489 - val_loss: 0.2349 - val_accuracy: 0.9204\n",
            "Epoch 14/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.1323 - accuracy: 0.9511 - val_loss: 0.2404 - val_accuracy: 0.9235\n",
            "Epoch 15/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.1201 - accuracy: 0.9548 - val_loss: 0.2539 - val_accuracy: 0.9204\n",
            "Epoch 16/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.1162 - accuracy: 0.9565 - val_loss: 0.2524 - val_accuracy: 0.9221\n",
            "Epoch 17/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.1050 - accuracy: 0.9600 - val_loss: 0.2521 - val_accuracy: 0.9242\n",
            "Epoch 18/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.1013 - accuracy: 0.9622 - val_loss: 0.2809 - val_accuracy: 0.9223\n",
            "Epoch 19/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.0965 - accuracy: 0.9637 - val_loss: 0.2790 - val_accuracy: 0.9213\n",
            "Epoch 20/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0905 - accuracy: 0.9661 - val_loss: 0.2945 - val_accuracy: 0.9256\n",
            "Epoch 21/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0871 - accuracy: 0.9672 - val_loss: 0.2911 - val_accuracy: 0.9244\n",
            "Epoch 22/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.0823 - accuracy: 0.9694 - val_loss: 0.2907 - val_accuracy: 0.9237\n",
            "Epoch 23/500\n",
            "600/600 [==============================] - 6s 9ms/step - loss: 0.0771 - accuracy: 0.9711 - val_loss: 0.2926 - val_accuracy: 0.9230\n",
            "Epoch 24/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0744 - accuracy: 0.9719 - val_loss: 0.3167 - val_accuracy: 0.9215\n",
            "Epoch 25/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0708 - accuracy: 0.9742 - val_loss: 0.3365 - val_accuracy: 0.9219\n",
            "Epoch 26/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.0704 - accuracy: 0.9736 - val_loss: 0.3384 - val_accuracy: 0.9220\n",
            "Epoch 27/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.0673 - accuracy: 0.9754 - val_loss: 0.3398 - val_accuracy: 0.9232\n",
            "Epoch 28/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.0618 - accuracy: 0.9776 - val_loss: 0.3347 - val_accuracy: 0.9216\n",
            "Epoch 29/500\n",
            "600/600 [==============================] - 5s 9ms/step - loss: 0.0607 - accuracy: 0.9772 - val_loss: 0.3561 - val_accuracy: 0.9246\n",
            "Epoch 30/500\n",
            "600/600 [==============================] - 6s 10ms/step - loss: 0.0583 - accuracy: 0.9776 - val_loss: 0.3550 - val_accuracy: 0.9229\n",
            "Epoch 00030: early stopping\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CtFiCm4lSYNJ",
        "outputId": "291146ce-56c6-40b9-9c01-e1a0098b6500"
      },
      "source": [
        "fmnist_c2f3.evaluate(X_test, y_test, batch_size =100)"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 [==============================] - 0s 5ms/step - loss: 0.3550 - accuracy: 0.9229\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.354977548122406, 0.9229000210762024]"
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tJ-8xkicTJMQ"
      },
      "source": [
        "# Graph of loss and accuracy\n",
        "- model: fmnist_c2f3"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "b9r_GacDTN7b",
        "outputId": "7c73ed6f-6d51-46ac-e957-4387ea172cf9"
      },
      "source": [
        "# Plot loass and accuracy\n",
        "# Plot training & validation accuracy values\n",
        "loss_list = [100 * i for i in hist.history['loss']]\n",
        "acc_list = [100 * i for i in hist.history['accuracy']]\n",
        "\n",
        "epochs = range(1, len(loss_list) + 1)\n",
        "\n",
        "plt.plot(epochs,loss_list) \n",
        "plt.plot(epochs,acc_list) \n",
        "plt.title('Model loss & accuracy')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['loss', 'accuracy'], loc='center left')\n",
        "plt.show()"
      ],
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JZ_7kbkjTO6A"
      },
      "source": [
        "vloss_list = [100 * i for i in hist.history['val_loss']]\n",
        "vacc_list = [100 * i for i in hist.history['val_accuracy']]"
      ],
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "m7ZWo3MqTSxh",
        "outputId": "2d9994fd-2f0f-4923-9a25-88798e6ee8fb"
      },
      "source": [
        "plt.plot(epochs,vloss_list)  \n",
        "plt.plot(epochs,vacc_list)  \n",
        "plt.title('Model val_loss & val_accuracy')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['val_loss', 'val_accuracy'], loc='center left')\n",
        "plt.show()"
      ],
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "5gP7PWNoTW7J",
        "outputId": "bbc9bd51-85f8-4001-bac5-60c2b3cf56e1"
      },
      "source": [
        "plt.plot(epochs,acc_list)  \n",
        "plt.plot(epochs,vacc_list)  \n",
        "plt.title('accuracy vs. val_accuracy')\n",
        "plt.ylabel('Accuracy (%)')\n",
        "plt.xlabel('Epoch')\n",
        "plt.legend(['accuracy','val_accuracy'], loc='center')\n",
        "plt.plot(np.argmax(np.array(vacc_list))+1,vacc_list[np.argmax(np.array(vacc_list))], 'r*') \n",
        "plt.show()"
      ],
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "TUo61GwaSb8p",
        "outputId": "2ada7f6f-3d28-440c-8ae4-b3d797a17129"
      },
      "source": [
        "# 중요\n",
        "# More graphs of loss and accuracy\n",
        "history_dict = hist.history\n",
        "loss = history_dict['loss']\n",
        "val_loss = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss) + 1)\n",
        "\n",
        "plt.figure(figsize=(14, 4))\n",
        "\n",
        "plt.subplot(1,2,1)\n",
        "plt.plot(epochs, loss, 'go-', label='Training Loss')\n",
        "plt.plot(epochs, val_loss, 'bd', label='Validation Loss')\n",
        "plt.plot(np.argmin(np.array(val_loss))+1,val_loss[np.argmin(np.array(val_loss))], 'r*', ms=12)\n",
        "plt.title('Training and Validation Loss, min: ' + str(np.round(val_loss[np.argmin(np.array(val_loss))],4)))\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "\n",
        "acc = history_dict['accuracy']\n",
        "val_acc = history_dict['val_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss) + 1)\n",
        "\n",
        "plt.subplot(1,2,2)\n",
        "plt.plot(epochs, acc, 'go-', label='Training Accuracy') #, c='blue')\n",
        "plt.plot(epochs, val_acc, 'bd', label='Validation Accuracy') #, c='red')\n",
        "plt.plot(np.argmax(np.array(val_acc))+1,val_acc[np.argmax(np.array(val_acc))], 'r*', ms=12)\n",
        "plt.title('Training and Validation Accuracy, max: ' + str(np.round(val_acc[np.argmax(np.array(val_acc))],4)))\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1008x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sC3rB2HDSkNm"
      },
      "source": [
        "## C2F3 Best Model\n",
        "- fmnist_c2f3_best_weights.020-0.9256.hdf5"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bCPcgUEMSfdx",
        "outputId": "46bf7e53-7bc4-441f-e7d4-d4a3a45e0d66"
      },
      "source": [
        "from keras.models import load_model\n",
        "\n",
        "model = load_model('fmnist_c2f3_best_weights.020-0.9256.hdf5')\n",
        "model.evaluate(X_test, y_test, batch_size=100)"
      ],
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100/100 [==============================] - 1s 5ms/step - loss: 0.2945 - accuracy: 0.9256\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.2945386469364166, 0.925599992275238]"
            ]
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GeJOGHI2rvQw"
      },
      "source": [
        "---"
      ]
    }
  ]
}